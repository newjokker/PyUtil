# 代码走查


------------------------------------------------------------------------------------------------------------------------
### 袁小棋

* 代码亮点
    * 层次分明，结构清晰 （doprocess）
    * 善用 map 函数和 lambda 表达式，代码简洁明晰 （getIAE）

* 我从代码中体会到的东西
    * 函数两种调用方法 (1) self.method() (2) ClassName.method()  | 将静态函数当做实例函数使用的方法 ： self.stat_city(self, INV_tif, 'INV')
    * 一共有三种函数，（1）实例函数，用到实例属性 （2）静态函数，@staticmethod，不用类属性和实例属性 （3）类函数，@classmethod，用到类属性
    * 类属性和实例属性的区别，（1）属于所有函数还是由单一实例所有
    * 类属性和实例属性的区别 （类属性的特性）--> 磊哥实现单例模式使用的方法  --> 磊哥代码的进一步规范化（调用类属性，定义为类函数 @classmethod, cls 关键字）

* 代码的建议
    * 虽然代码中的函数名，见名知意，但是至少对每个函数的作用需要一句话来说明
    * 重复的部分可以使用函数进行操作，简单的重复可以使用 lambda 表达式, (getIAE, readDatas)
    * 可以使用 ''.format() 让拼接的字符串看着更加简洁
    * open() close() ==> with open()
    * 不要使用非主流的静态函数，需要用到实例属性，但写为传入自身的静态函数，调用的时候第一个参数是 self， self.stat_city(self, INV_tif, 'INV')

* 其他想说的
    * 为什么要应用通用到函数，下面的代码早就发现有问题，因为没有应用通用函数，而是直接粘贴过来的，所以早就发现的问题，还是没有纠正过来
        if 'int16' in im_data.dtype.name:
            datatype = gdal.GDT_UInt16
    * enumerate 函数的使用，可以同时获取切片和计数 （getINV）
    * 三个我重写的函数 getReplaceele_new， subAreatif_new， doStatisComp_new， MaskByLandcover_new
------------------------------------------------------------------------------------------------------------------------
### 张双丽

* 代码亮点
    * os.path.join() 可以传入多个参数（看源码）

* 代码的建议
    * 删除文件夹不能用 os.remove(),(subAreatif)
    * 逻辑可以尽量简化，可以将重复的内容写成函数调用，能让代码变得更加简洁，(MaskByLandcover)
    * 逻辑尽可能的清晰，可以使得代码更加容易理解（getReplaceele）
    * 变量名眼花缭乱，未判断是否为 shp 文件之前命名为 shpName；inMaskData，outExtractByMask，subMasklist 比较容易误解 （subAreatif）
    * 三个我重写的函数 getReplaceele_new， subAreatif_new， doStatisComp_new， MaskByLandcover_new
------------------------------------------------------------------------------------------------------------------------
### 龚永驰

* 代码亮点
    * 使用类的继承机制，子类重用父类的特性
    * 每个函数都有说明，有的还写明了输入参数的数据结构，清晰明了
    * 使用 isinstance 关键字对输入参数进行类型判断
    * 代码实现的很有创意

* 代码建议
    * dir（directory）一般用于文件夹路径，文件路径使用 path 比较多，Html - init
    * 不要用复杂的结构实现简单的功能，而且继承为三个子类之后，想同时修改表格、图片、文字就不行了，可以使用一个类来实现。
    * 不要将参数在函数中写死，或不合时宜的预定义，
    * 功能过于局限，对于实现的需求，完全可以直接写几个函数进行替换，不需要写成面向对象的样式
------------------------------------------------------------------------------------------------------------------------
### 冯博

* 我直接从代码中学到的和代码的优点
    * 灵活使用位运算 '|' create_nc_addxy，& | ^ ~  ==> 逻辑运算符和位运算符的区别 （and or not）
    * 灵活使用 numpy 的函数， np.asarray， np.delete， .tolist()， np.transpose（转置）
    * 使用 列表表达式 [str(i).replace('[', '').replace(']', '').replace(' ', '') for i in all_arr]
    * 有足够的注释，能比较容易的看得懂代码
    # 善用递归结构，create_nc_tif - del_file，递归删除文件的方式，删除整个文件夹

* 代码建议
    * 不使用传参的方式，直接在函数里面拼接路径不可取
    * 不使用实例属性和类属性的方法建议写成静态方法
    * 对 array 数据理解不够，我重写了方法从nc文件到矢量点部分的内容，可以看出能节省不少操作，逻辑能更加清晰

* 代码思路 nc 出视图 png
    * 读取 nc 数据，提取其中的每一个点，存为 txt
    * txt 转矢量点
    * 矢量点插值为 tiff
    * tiff 背景替换，调整亮度，傅里叶变化（去除噪点，空间上重复的图案），保存为 png
    